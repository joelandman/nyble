# handle OS image configuration, Finalize_Base tasks using
# the fb_ prefix here.

fb_last:	fb_packages osinst_last
	touch fb_last

fb_fstab:	osinst_last
	# fstab
	touch ${TARGET}/etc/fstab
	echo "proc  /proc proc defaults 0 0" 	   >> ${TARGET}/etc/fstab
	echo "sysfs /sys sysfs defaults 0 0" 	   >> ${TARGET}/etc/fstab
ifdef PHYSICAL
	# note: this needs correct autodetection/config.  /dev/md0 has been
	# a standard practice, but it could be something else.
	 echo "/dev/md0 / ext4  defaults 1 2"	   >> ${TARGET}/etc/fstab
else
	 echo "none / tmpfs  defaults,size=8G 0 0" >> ${TARGET}/etc/fstab
endif
	#
	# NFS bits in case they will be used
	#echo "rpc_pipefs /var/lib/nfs/rpc_pipefs rpc_pipefs defaults 0 0" \
	#	>> ${TARGET}/etc/fstab
	#echo "nfsd /proc/fs/nfsd nfsd defaults 0 0" >> ${TARGET}/etc/fstab
	#mkdir -p ${TARGET}/var/lib/nfs/rpc_pipefs
	mkdir -p ${TARGET}/run/log/journal

	# remove odd fstab banner
	sed -i 's|# UNCONFIGURED FSTAB FOR BASE SYSTEM||g' ${TARGET}/etc/fstab

	# build mount points we will use later
	chroot ${TARGET} mkdir -p /data /mnt

	touch fb_fstab


fb_init: fb_fstab
	#
	# fix tmpfs parameters.  Use a maximum of 5% ram, not 25%
	echo "#" >> ${TARGET}/etc/default/tmpfs
	echo "# fix TMPFS_SIZE = 5%VM" >> ${TARGET}/etc/default/tmpfs
	echo "TMPFS_SIZE=5%VM" >> ${TARGET}/etc/default/tmpfs
	#
	# inittab:  this is legacy, and not likely needed.  Will be deprecated
	# in a future release.
	echo "T0:12345:respawn:/sbin/getty -L ttyS0 115200 vt100" \
		>> ${TARGET}/etc/inittab
	echo "T1:12345:respawn:/sbin/getty -L ttyS1 115200 vt100" \
		>> ${TARGET}/etc/inittab
	echo "T2:12345:respawn:/sbin/getty -L ttyS2 115200 vt100" \
		>> ${TARGET}/etc/inittab

	touch fb_init


fb_limits: fb_init
	# limits:  base linux limits are too low for most heavy utilization use cases
	echo "*	soft nofile  131072" >> ${TARGET}/etc/security/limits.d/files.conf
	echo "* hard nofile  262144" >> ${TARGET}/etc/security/limits.d/files.conf
	echo "*	soft memlock 262144" >> ${TARGET}/etc/security/limits.d/files.conf
	echo "* hard memlock 262144" >> ${TARGET}/etc/security/limits.d/files.conf

	#
	# set limits in /etc/pam.d/...
	echo "session    required   pam_limits.so" \
		>> ${TARGET}/etc/pam.d/common-session
	echo "session    required   pam_limits.so" \
		>> ${TARGET}/etc/pam.d/common-session-noninteractive
	echo "session    required   pam_limits.so" \
		>> ${TARGET}/etc/pam.d/login
	echo "session    required   pam_limits.so" \
		>> ${TARGET}/etc/pam.d/sshd
		touch fb_limits


fb_blacklist: 	fb_limits
	#
	# blacklist broken drivers
	echo "blacklist mei"      >> ${TARGET}/etc/modprobe.d/blacklist.conf
	echo "blacklist evbug"    >> ${TARGET}/etc/modprobe.d/blacklist.conf
	echo "blacklist acpi_pad" >> ${TARGET}/etc/modprobe.d/blacklist.conf
	echo "blacklist pm80xx"   >> ${TARGET}/etc/modprobe.d/blacklist.conf
	echo "blacklist csiostor" >> ${TARGET}/etc/modprobe.d/blacklist.conf
	touch fb_blacklist


fb_install_kernel:   fb_blacklist

	# install kernel.  The below is an IPC mechanism to hand
	# information to the install_kernel script.

	echo NYBLE KERNEL = ${NYBLE_KERNEL}
	echo TARGET=${TARGET} 			 > kernel.data
	echo KERNEL_URL=${KERNEL_URL} 		>> kernel.data
	echo KERNEL_VERSION=${KERNEL_VERSION} 	>> kernel.data
	echo KV=${KV}				>> kernel.data
	echo NK=${NYBLE_KERNEL}			>> kernel.data
	echo DISTRO=${DISTRO}			>> kernel.data

	# install_perf isn't currently working. Will turn this into a no-op
	# until we can get it working correctly.
	#cp OS/${DISTRO}/install_perf.bash ${TARGET}/root
	#chmod +x  ${TARGET}/root/install_perf.bash
	cp kernel.data ${TARGET}/root
	cp OS/${DISTRO}/prepare_modbuild.bash ${TARGET}/root
	chmod +x  ${TARGET}/root/prepare_modbuild.bash
	OS/${DISTRO}/install_kernel.bash

	rm -f `find ${TARGET}/lib/modules/ | grep csiostor.ko`

	echo "scsi_mod" >> ${TARGET}/etc/initramfs-tools/modules
	echo "md_mod"   >> ${TARGET}/etc/initramfs-tools/modules
	echo "sg"       >> ${TARGET}/etc/initramfs-tools/modules
	echo "ses"      >> ${TARGET}/etc/initramfs-tools/modules
	echo "raid1"    >> ${TARGET}/etc/initramfs-tools/modules

	echo "igb"      >> ${TARGET}/etc/initramfs-tools/modules
	echo "e1000e"   >> ${TARGET}/etc/initramfs-tools/modules
	echo "i40e"     >> ${TARGET}/etc/initramfs-tools/modules
	echo "ixgbe"    >> ${TARGET}/etc/initramfs-tools/modules
	echo "cxgb4"    >> ${TARGET}/etc/initramfs-tools/modules
	echo "mlx4_en"  >> ${TARGET}/etc/initramfs-tools/modules
	echo "mlx5_core">> ${TARGET}/etc/initramfs-tools/modules
	echo "zram"     >> ${TARGET}/etc/initramfs-tools/modules
	echo "virtio"     	>> ${TARGET}/etc/initramfs-tools/modules
	echo "virtio_blk"   >> ${TARGET}/etc/initramfs-tools/modules
	echo "virtio_pci"   >> ${TARGET}/etc/initramfs-tools/modules
	echo "virtio_scsi"  >> ${TARGET}/etc/initramfs-tools/modules
	echo "virtio_console"		>> ${TARGET}/etc/initramfs-tools/modules
	echo "virtio_net"   >> ${TARGET}/etc/initramfs-tools/modules
	echo "vfio"     		>> ${TARGET}/etc/initramfs-tools/modules
	echo "vfio_pci"     >> ${TARGET}/etc/initramfs-tools/modules
	echo "vfio_iommu_type1" >> ${TARGET}/etc/initramfs-tools/modules
	echo "iscsi_tcp" >> ${TARGET}/etc/initramfs-tools/modules
	echo "libiscsi_tcp" >> ${TARGET}/etc/initramfs-tools/modules
	echo "libiscsi" >> ${TARGET}/etc/initramfs-tools/modules
	echo "scsi_transport_iscsi" >> ${TARGET}/etc/initramfs-tools/modules

	#rm -f ${TARGET}/usr/src/linux-source-${KERNEL_VERSION}.tar.bz2

	touch fb_install_kernel


fb_systemd:	fb_install_kernel
	# fix some systemd timeout brokenness
	sed -i 's|^#DefaultTimeoutStartSec=.*|DefaultTimeoutStartSec=15|g'		\
	 		${TARGET}/etc/systemd/system.conf
	sed -i 's|^#DefaultTimeoutStopSec=.*|DefaultTimeoutStopSec=15|g' 			\
			${TARGET}/etc/systemd/system.conf
	sed -i 's|^#ShutdownWatchdogSec=.*|ShutdownWatchdogSec=2min|g' 				\
			${TARGET}/etc/systemd/system.conf

	# fix systemd journaling.  Yeah, really
	sed -i 's|^#Storage=.*|Storage=persistent|g' ${TARGET}/etc/systemd/journald.conf
	sed -i 's|^#SystemMaxUse=.*|SystemMaxUse=250M|g' ${TARGET}/etc/systemd/journald.conf
	sed -i 's|^#RuntimeMaxUse=.*|RuntimeMaxUse=250M|g' ${TARGET}/etc/systemd/journald.conf
	sed -i 's|^#ForwardToSyslog=.*|ForwardToSyslog=yes|g' ${TARGET}/etc/systemd/journald.conf
	#sed -i 's|||g' ${TARGET}/etc/systemd/journald.conf

	#
	# fix the INSANE logind.conf per user directory size ... hard code it to 256M
	sed -i 's|^#RuntimeDirectorySize=.*|RuntimeDirectorySize=256M|g' ${TARGET}/etc/systemd/logind.conf
	#

	# fix the INSANE logind.conf KillUserProcesses problem, which nukes nohup/tmux/screen ...
	sed -i 's|^#KillUserProcesses=.*|KillUserProcesses=no|g' ${TARGET}/etc/systemd/logind.conf

	#
	# dear lord ... what were they thinking????!?
	touch fb_systemd


fb_serial_console:	fb_systemd
	#
ifdef PHYSICAL
	# fix /etc/default/grub to have correct options
	chroot ${TARGET} sed -i.backup 's/^GRUB_CMDLINE_LINUX_DEFAULT="quiet"/GRUB_CMDLINE_LINUX_DEFAULT="verbose intel_idle.max_cstate=0 processor.max_cstate=1  sysfs.deprecated=0 cpuidle.off=1 console=tty0 console=ttyS1,115200n8 pcie_aspm=off"/' \
			/etc/default/grub
	chroot ${TARGET} sed -i 's/^#GRUB_TERMINAL=console/GRUB_TERMINAL=console/' 	\
			/etc/default/grub
	echo 'GRUB_SERIAL_COMMAND="serial --speed=115200 --unit=1 --word=8 --parity=no --stop=1"' \
			>> ${TARGET}/etc/default/grub
	chroot ${TARGET} sed -i.backup 's/^#GRUB_TERMINAL=console/GRUB_TERMINAL=console/' \
	 		/etc/default/grub
endif
	#
	# add in permissions for serial port login
	echo "ttyS0" >> ${TARGET}/etc/securetty
	echo "ttyS1" >> ${TARGET}/etc/securetty
	echo "ttyS2" >> ${TARGET}/etc/securetty
	echo "ttyS3" >> ${TARGET}/etc/securetty

	#
	# turn on serial port gettys
	chroot ${TARGET} systemctl enable serial-getty@ttyS0
	chroot ${TARGET} systemctl enable serial-getty@ttyS1
	chroot ${TARGET} systemctl enable serial-getty@ttyS2
	# this generates log spam ... but ... you kinda need it.  Turn these
	# off with boot options disablettyS$X where $X={0,1,2} as needed.
	touch fb_serial_console


fb_user_pass:	fb_serial_console
	#
	# root user password
ifeq ($(RANDOMROOTPW),1)
        # generate random passwd
	echo "root:"`./new_passwd.pl` > ${TARGET}/root/rootpw
else
	echo "root:nyble" > ${TARGET}/root/rootpw
endif
	chmod 600 ${TARGET}/root/rootpw
	cat ${TARGET}/root/rootpw | chroot ${TARGET} chpasswd
	chroot ${TARGET} ssh-keygen -b 4096 -t rsa -f /root/.ssh/id_rsa -q -N ""
	# add user NYBLE
	chroot ${TARGET} useradd -m nyble
	echo "nyble:nyble" | chroot ${TARGET} chpasswd

	touch fb_user_pass


fb_hostname:	fb_user_pass
	#
	# hostname, motd, etc.

	cat motd.nyble > ${TARGET}/etc/motd
	echo "NyBLE-ramboot" > ${TARGET}/etc/hostname
	echo "127.0.0.2 Nyble-ramboot" >>  ${TARGET}/etc/hosts

	touch fb_hostname


fb_network:	fb_hostname
	#
	# fix /etc/network/interfaces
	cat networking/basic_network.config >> ${TARGET}/etc/network/interfaces
	echo "" >> ${TARGET}/etc/network/interfaces

	# tune igb
	echo "options igb RSS=0,0 VMDQ=4,4 InterruptThrottleRate=10000,10000 " 		\
		>> ${TARGET}/etc/modprobe.d/igb.conf

	#
	# tune ixgbe
	echo "options ixgbe DCA=2,2,2,2 dmac_watchdog=100,100,100,100 InterruptThrottleRate=10000,10000,10000,10000 " \
		>> ${TARGET}/etc/modprobe.d/ixgbe.conf
	#
	#

	# this part will be controversial, but ...
	# turn off networking at boot
	chroot ${TARGET} systemctl disable networking.service
	# we turn on networking after the OS is fully up.  We don't
	# want networking stopping the boot

	touch fb_network


fb_postbootconf: fb_network
	# setup the tune on boot script

	cp nyble-ramboot-init.d ${TARGET}/etc/init.d/nyble
	chmod +x ${TARGET}/etc/init.d/nyble
	chroot ${TARGET} systemctl enable nyble

	#
	# turn off iscsid and open-iscsi on boot
	chroot ${TARGET} systemctl disable iscsid.service
	chroot ${TARGET} systemctl disable open-iscsi.service

	#chroot ${TARGET} systemctl daemon-reload
	touch fb_postbootconf


fb_ntp: fb_postbootconf
	#
	# fix /etc/ntp.conf to point to internal-install for ntp
	touch ${TARGET}/etc/ntp.conf
	sed -i 's|^server 0.debian.pool.ntp.org iburst|server internal-install|g'  \
			${TARGET}/etc/ntp.conf
	sed -i '/^server 1.debian.pool.ntp.org iburst/d' ${TARGET}/etc/ntp.conf
	sed -i '/^server 2.debian.pool.ntp.org iburst/d' ${TARGET}/etc/ntp.conf
	sed -i '/^server 3.debian.pool.ntp.org iburst/d' ${TARGET}/etc/ntp.conf
	touch fb_ntp


fb_mid:	fb_ntp

	touch fb_mid


fb_sysctl: fb_mid
	#
	cat sysctl.conf >> ${TARGET}/etc/sysctl.conf

	touch fb_sysctl


fb_policy:	fb_sysctl
	#
	# turn off the policy bits in the ramdisk
	echo '#!/bin/bash' > ${TARGET}/usr/sbin/policy-rc.d
	echo "exit 101" >> ${TARGET}/usr/sbin/policy-rc.d
	chmod +x ${TARGET}/usr/sbin/policy-rc.d

	touch fb_policy


fb_zfs: fb_policy
ifeq ($(ZFS),1)
	mkdir -p ${TARGET}/root/zfs
	cp -v extra/*.gz extra/build_zfs_${DISTRO}.bash ${TARGET}/root/zfs
	chmod +x ${TARGET}/root/zfs/build_zfs_${DISTRO}.bash
	chroot ${TARGET} /root/zfs/build_zfs_${DISTRO}.bash
	rm -rf ${TARGET}/root/zfs
endif
	touch fb_zfs


fb_drivers: fb_zfs
	cd drivers ; $(MAKE) all
	touch fb_drivers

fb_packages: fb_drivers
		cd packages ; $(MAKE) all
		touch fb_packages
