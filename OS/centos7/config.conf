# handle OS image configuration, Finalize_Base tasks using
# the fb_ prefix here.

fb_last:	fb_final osinst_last
	touch fb_last

fb_fstab:	osinst_last
	# fstab
	touch ${TARGET}/etc/fstab
	echo "tmpfs /tmp tmpfs nodev,nosuid,exec,size=4G 0 0"			>> ${TARGET}/etc/fstab
	echo "tmpfs /var/tmp tmpfs nodev,size=4G 0 0"					>> ${TARGET}/etc/fstab
ifdef PHYSICAL
	# note: this needs correct autodetection/config.  /dev/md0 has been
	# a standard practice, but it could be something else.
	 echo "/dev/md0 / ext4  defaults 1 2"	   >> ${TARGET}/etc/fstab
else
	 echo "none / tmpfs  defaults,size=8G 0 0" >> ${TARGET}/etc/fstab
endif


	# remove odd fstab banner
	sed -i 's|# UNCONFIGURED FSTAB FOR BASE SYSTEM||g' ${TARGET}/etc/fstab

	# build mount points we will use later
	chroot ${TARGET} mkdir -p /data /mnt

	touch fb_fstab


fb_init: fb_fstab
	#
	# fix tmpfs parameters.  Use a maximum of 5% ram, not 25%
	echo "#" >> ${TARGET}/etc/default/tmpfs
	echo "# fix TMPFS_SIZE = 5%VM" >> ${TARGET}/etc/default/tmpfs
	echo "TMPFS_SIZE=5%VM" >> ${TARGET}/etc/default/tmpfs
	#
	# inittab:  this is legacy, and not likely needed.  Will be deprecated
	# in a future release.
	echo "T0:12345:respawn:/sbin/getty -L ttyS0 115200 vt100" \
		>> ${TARGET}/etc/inittab
	echo "T1:12345:respawn:/sbin/getty -L ttyS1 115200 vt100" \
		>> ${TARGET}/etc/inittab
	echo "T2:12345:respawn:/sbin/getty -L ttyS2 115200 vt100" \
		>> ${TARGET}/etc/inittab

	touch fb_init


fb_limits: fb_fstab
	# limits:  base linux limits are too low for most heavy utilization use cases
	echo "*	soft nofile  131072" >> ${TARGET}/etc/security/limits.d/files.conf
	echo "* hard nofile  262144" >> ${TARGET}/etc/security/limits.d/files.conf
	echo "*	soft memlock 262144" >> ${TARGET}/etc/security/limits.d/files.conf
	echo "* hard memlock 262144" >> ${TARGET}/etc/security/limits.d/files.conf

		touch fb_limits


fb_blacklist: 	fb_fstab
	#
	# blacklist broken drivers
	echo "blacklist mei"      >> ${TARGET}/etc/modprobe.d/blacklist.conf
	echo "blacklist evbug"    >> ${TARGET}/etc/modprobe.d/blacklist.conf
	echo "blacklist acpi_pad" >> ${TARGET}/etc/modprobe.d/blacklist.conf
	echo "blacklist pm80xx"   >> ${TARGET}/etc/modprobe.d/blacklist.conf
	echo "blacklist csiostor" >> ${TARGET}/etc/modprobe.d/blacklist.conf
	touch fb_blacklist


fb_install_kernel_prep:   fb_blacklist

	# install kernel.  The below is an IPC mechanism to hand
	# information to the install_kernel script.

	echo NYBLE KERNEL = ${NYBLE_KERNEL}
	echo TARGET=${TARGET} 				 > ${TARGET}/root/kernel.data
	echo KERNEL_URL=${KERNEL_URL} 			>> ${TARGET}/root/kernel.data
	echo KERNEL_VERSION=${KERNEL_VERSION}		>> ${TARGET}/root/kernel.data
	echo KV=${KV}					>> ${TARGET}/root/kernel.data
	echo NK=${NYBLE_KERNEL}				>> ${TARGET}/root/kernel.data
	echo DISTRO=${DISTRO}				>> ${TARGET}/root/kernel.data
	touch fb_install_kernel_prep

fb_install_kernel_exec: fb_install_kernel_prep
	# install_perf isn't currently working. Will turn this into a no-op
	# until we can get it working correctly.
	yum -y install bc elfutils-libelf-devel  --installroot=${TARGET}
	cp OS/${DISTRO}/install_kernel.bash  ${TARGET}/root
	chmod +x  ${TARGET}/root/install_kernel.bash 
	cd ${TARGET}/root ; ./install_kernel.bash
	rm -f ${TARGET}/root/install_kernel.bash 
	touch fb_install_kernel_exec

fb_install_kernel_dracut: fb_install_kernel_exec
	#OS/${DISTRO}/install_kernel.bash
	rm -f `find ${TARGET}/lib/modules/ | grep csiostor.ko`

	echo -n "add_drivers+=\""		>  ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "scsi_mod " 			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "md_mod "   			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "libata "   			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "sg " 		    		>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "ses "				>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "raid1 "      			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "igb "				>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "ixgbe "      			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "e1000e "     			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "mlx4_en "	  		>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "mlx5_core "			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "zram "				>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "virtio "			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "virtio_blk "			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "virtio_net "			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "virtio_pci "			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "virtio_scsi "			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "virtio_console "		>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "vfio "				>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "vfio_pci "			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "vfio_iommu_type1 "		>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "libiscsi "			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "libiscsi_tcp "			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "iscsi_tcp "			>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo -n "scsi_transport_iscsi "		>> ${TARGET}/etc/dracut.conf.d/modules.conf

	echo -n '"' 				>> ${TARGET}/etc/dracut.conf.d/modules.conf
	echo ""  				>> ${TARGET}/etc/dracut.conf.d/modules.conf

	sed -i 's|^#hostonly=.*|hostonly=no|g' ${TARGET}/etc/dracut.conf
	#sed -i 's|^#add_dracutmodules.*|add_dracutmodules+=scalable|g' ${TARGET}/etc/dracut.conf
	sed -i 's|^#nofscks.*|nofscks="no"|g' ${TARGET}/etc/dracut.conf

ifneq ($(PHYSICAL),1)
	# 85ramboot setup for dracut (needed for ramdisk boot)
	cp -rv OS/${DISTRO}/85ramdisk ${TARGET}/usr/lib/dracut/modules.d

	# updated dracut-cmdline.sh to support root=ram
	cp -vf OS/${DISTRO}/dracut-cmdline.sh ${TARGET}/usr/lib/dracut/modules.d/98systemd/dracut-cmdline.sh

	# fix the 99base/init.sh so it doesn't allocate 1/2 the ram for /dev/shm, /run, and others
	cp -vf OS/${DISTRO}/init.sh ${TARGET}/usr/lib/dracut/modules.d/99base/init.sh
endif
	#chroot ${TARGET} dracut -v --force --regenerate-all
	touch fb_install_kernel_dracut


fb_systemd:	fb_fstab
	# fix some systemd timeout brokenness
	sed -i 's|^#DefaultTimeoutStartSec=.*|DefaultTimeoutStartSec=15|g'		\
	 		${TARGET}/etc/systemd/system.conf
	sed -i 's|^#DefaultTimeoutStopSec=.*|DefaultTimeoutStopSec=15|g' 			\
			${TARGET}/etc/systemd/system.conf
	sed -i 's|^#ShutdownWatchdogSec=.*|ShutdownWatchdogSec=2min|g' 				\
			${TARGET}/etc/systemd/system.conf

	# fix systemd journaling.  Yeah, really
	sed -i 's|^#Storage=.*|Storage=persistent|g' ${TARGET}/etc/systemd/journald.conf
	sed -i 's|^#SystemMaxUse=.*|SystemMaxUse=250M|g' ${TARGET}/etc/systemd/journald.conf
	sed -i 's|^#RuntimeMaxUse=.*|RuntimeMaxUse=250M|g' ${TARGET}/etc/systemd/journald.conf
	sed -i 's|^#ForwardToSyslog=.*|ForwardToSyslog=yes|g' ${TARGET}/etc/systemd/journald.conf
	#sed -i 's|||g' ${TARGET}/etc/systemd/journald.conf

	#
	# fix the INSANE logind.conf per user directory size ... hard code it to 256M
	sed -i 's|^#RuntimeDirectorySize=.*|RuntimeDirectorySize=256M|g' ${TARGET}/etc/systemd/logind.conf
	#

	# fix the INSANE logind.conf KillUserProcesses problem, which nukes nohup/tmux/screen ...
	sed -i 's|^#KillUserProcesses=.*|KillUserProcesses=no|g' ${TARGET}/etc/systemd/logind.conf

	#
	# dear lord ... what were they thinking????!?
	touch fb_systemd


fb_serial_console:	fb_fstab
	#
ifdef PHYSICAL
	# fix /etc/default/grub to have correct options
	chroot ${TARGET} sed -i.backup 's/^GRUB_CMDLINE_LINUX_DEFAULT="quiet"/GRUB_CMDLINE_LINUX_DEFAULT="verbose intel_idle.max_cstate=0 processor.max_cstate=1  sysfs.deprecated=0 cpuidle.off=1 console=tty0 console=ttyS1,115200n8 pcie_aspm=off"/' \
			/etc/default/grub
	chroot ${TARGET} sed -i 's/^#GRUB_TERMINAL=console/GRUB_TERMINAL=console/' 	\
			/etc/default/grub
	echo 'GRUB_SERIAL_COMMAND="serial --speed=115200 --unit=1 --word=8 --parity=no --stop=1"' \
			>> ${TARGET}/etc/default/grub
	chroot ${TARGET} sed -i.backup 's/^#GRUB_TERMINAL=console/GRUB_TERMINAL=console/' \
	 		/etc/default/grub
endif
	#
	# add in permissions for serial port login
	echo "ttyS0" >> ${TARGET}/etc/securetty
	echo "ttyS1" >> ${TARGET}/etc/securetty
	echo "ttyS2" >> ${TARGET}/etc/securetty
	echo "ttyS3" >> ${TARGET}/etc/securetty

	#
	# turn on serial port gettys
	chroot ${TARGET} systemctl enable serial-getty@ttyS0
	chroot ${TARGET} systemctl enable serial-getty@ttyS1
	chroot ${TARGET} systemctl enable serial-getty@ttyS2
	# this generates log spam ... but ... you kinda need it.  Turn these
	# off with boot options disablettyS$X where $X={0,1,2} as needed.
	touch fb_serial_console


fb_user_pass:	fb_fstab
	#
	# root user password
ifeq ($(RANDOMROOTPW),1)
        # generate random passwd
	echo "root:"`./new_passwd.pl` > ${TARGET}/root/rootpw
else
	echo "root:nyble" > ${TARGET}/root/rootpw
endif
	#chmod 600 ${TARGET}/root/rootpw
	cp -fv OS/${DISTRO}/setpw.bash ${TARGET}/root
	chmod +x ${TARGET}/root/setpw.bash
	chroot  ${TARGET} /root/setpw.bash
	#cat ${TARGET}/root/rootpw | /usr/sbin/chpasswd -R ${TARGET}
	chroot ${TARGET} /usr/bin/ssh-keygen -b 4096 -t rsa -f /root/.ssh/id_rsa -q -N ""

ifeq ($(NYBLEUSER),1)
	echo "nyble:nyble" > ${TARGET}/root/nyblepw
	# add user NYBLE
	/usr/sbin/useradd -m nyble -R ${TARGET}
	cp -fv OS/${DISTRO}/setnpw.bash ${TARGET}/root
	chmod +x ${TARGET}/root/setnpw.bash
	chroot  ${TARGET} /root/setnpw.bash
	#/usr/sbin/chpasswd -R ${TARGET}
endif
	rm -f ${TARGET}/root/setpw.bash  ${TARGET}/root/setnpw.bash
	touch fb_user_pass


fb_hostname:	fb_fstab
	#
	# hostname, motd, etc.

	cat motd.nyble > ${TARGET}/etc/motd
	echo "NyBLE-ramboot" > ${TARGET}/etc/hostname
	echo "127.0.0.2 Nyble-ramboot" >>  ${TARGET}/etc/hosts

	touch fb_hostname


fb_network:	fb_fstab

	# tune igb
	echo "options igb RSS=0,0 VMDQ=4,4 InterruptThrottleRate=10000,10000 " 		\
		>> ${TARGET}/etc/modprobe.d/igb.conf

	#
	# tune ixgbe
	echo "options ixgbe DCA=2,2,2,2 dmac_watchdog=100,100,100,100 InterruptThrottleRate=10000,10000,10000,10000 " \
		>> ${TARGET}/etc/modprobe.d/ixgbe.conf
	#

	# eth0 -> eth3, ib0 -> ib3
	mkdir -p ${TARGET}/etc/sysconfig/network-scripts/
	for network in eth0 eth1 eth2 eth3 ib0 ib1 ib2 ib3 ; \
	  do \
		cp -fv OS/${DISTRO}/ifcfg-eth ${TARGET}/etc/sysconfig/network-scripts/ifcfg-$$network ; \
		sed -i 's|^NAME=.*|NAME=$$network|g' ${TARGET}/etc/sysconfig/network-scripts/ifcfg-$$network ; \
		sed -i 's|^DEVICE=.*|DEVICE=$$network|g' ${TARGET}/etc/sysconfig/network-scripts/ifcfg-$$network ; \
	  done

	touch fb_network


fb_postbootconf: fb_fstab
	# setup the tune on boot script

	cp nyble-ramboot-init.d ${TARGET}/etc/init.d/nyble
	chmod +x ${TARGET}/etc/init.d/nyble
	chroot ${TARGET} systemctl enable nyble

	#
	# turn off open-iscsi on boot
	#chroot ${TARGET} systemctl disable open-iscsi.service

	#chroot ${TARGET} systemctl daemon-reload
	touch fb_postbootconf


fb_ntp: fb_fstab
	#
	# fix /etc/ntp.conf to point to internal-install for ntp
	touch ${TARGET}/etc/ntp.conf
	sed -i 's|^server 0.pool.ntp.org iburst|server internal-install|g'  \
			${TARGET}/etc/ntp.conf
	sed -i '/^server 1.pool.ntp.org iburst/d' ${TARGET}/etc/ntp.conf
	sed -i '/^server 2.pool.ntp.org iburst/d' ${TARGET}/etc/ntp.conf
	sed -i '/^server 3.pool.ntp.org iburst/d' ${TARGET}/etc/ntp.conf
	touch fb_ntp


fb_mid:	fb_ntp fb_fstab fb_limits fb_blacklist fb_postbootconf 	    \
	fb_serial_console fb_init fb_network fb_systemd fb_hostname \
	fb_install_kernel_dracut fb_user_pass fb_init
	# turn off SELINUX ....
	if [ -e ${TARGET}/etc/selinux/config ]; then \
	 sed -i 's|^SELINUX=.*|SELINUX=disabled|g' ${TARGET}/etc/selinux/config 	 ; \
	 sed -i 's|^SELINUXTYPE=.*|SELINUXTYPE=minimum|g' ${TARGET}/etc/selinux/config   ; \
	fi

	touch fb_mid


fb_sysctl: fb_mid
	#
	cat sysctl.conf >> ${TARGET}/etc/sysctl.conf
	echo '#!/bin/bash' > ${TARGET}/usr/sbin/policy-rc.d
	echo "exit 101" >> ${TARGET}/usr/sbin/policy-rc.d
	chmod +x ${TARGET}/usr/sbin/policy-rc.d

	touch fb_sysctl

fb_zfs: fb_sysctl fb_install_kernel_dracut
	mkdir -p ${TARGET}/root/zfs
	cp -v extra/*.gz extra/build_zfs_${DISTRO}.bash ${TARGET}/root/zfs
	yum -y install zlib-devel libuuid-devel libattr-devel  \
		libblkid-devel libselinux-devel libudev-devel  \
		openssl-devel --installroot=${TARGET} 
	chmod +x ${TARGET}/root/zfs/build_zfs_${DISTRO}.bash
	chroot ${TARGET} /root/zfs/build_zfs_${DISTRO}.bash
	rm -rf ${TARGET}/root/zfs
	touch fb_zfs

fb_packages: fb_zfs
	cd packages ; $(MAKE) all
	touch fb_packages

fb_final: fb_packages
	#yum -y remove `rpm -qa --root=${TARGET} | grep kernel-devel` --installroot=${TARGET} 
	yum clean all --installroot=${TARGET} 
	#yum -y remove doxygen alsa-lib \
	#	--installroot=${TARGET}
	rm -rf ${TARGET}/usr/share/icons ${TARGET}/usr/share/doc \
		${TARGET}/usr/share/backgrounds 

	touch fb_final
